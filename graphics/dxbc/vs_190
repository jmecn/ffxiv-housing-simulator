//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions:
//
// cbuffer g_MaterialParameter // 9
// {
//
//   float4 g_MaterialParameter[11];    // Offset:    0 Size:   176
//
// }
//
// cbuffer g_CameraParameter
// {
//
//   struct CameraParameter // 26
//   {
//
//       row_major float3x4 m_ViewMatrix;// Offset:    0
//       row_major float3x4 m_InverseViewMatrix;// Offset:   48 index 3
//       row_major float4x4 m_ViewProjectionMatrix;// Offset:   96 index 6
//       row_major float4x4 m_InverseViewProjectionMatrix;// Offset:  160 index 10
//       row_major float4x4 m_InverseProjectionMatrix;// Offset:  224 index 14
//       row_major float4x4 m_ProjectionMatrix;// Offset:  288 index 18
//       row_major float4x4 m_MainViewToProjectionMatrix;// Offset:  352 index 22
//       float3 m_EyePosition;          // Offset:  416 index 26
//       float3 m_LookAtVector;         // Offset:  432 index 27
//
//   } g_CameraParameter;               // Offset:    0 Size:   444
//
// }
//
// cbuffer g_InstanceData
// {
//
//   struct BGInstanceData // 6
//   {
//
//       row_major float3x4 m_TransformMatrix;// Offset:    0
//       float4 m_InstanceParam0;       // Offset:   48 index 3
//       float4 m_InstanceParam1;       // Offset:   64 index 4
//       float4 m_InstanceParam2;       // Offset:   80 index 5
//
//   } g_InstanceData;                  // Offset:    0 Size:    96
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// g_MaterialParameter               cbuffer      NA          NA            cb0      1
// g_CameraParameter                 cbuffer      NA          NA            cb1      1
// g_InstanceData                    cbuffer      NA          NA            cb2      1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz
// BINORMAL                 0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float
// BONE_INDEX               0   x           4     NONE     int
// BONE_WEIGHT              0   xyzw        5     NONE   float
// TEXCOORD                 0   xyzw        6     NONE   float   xyzw
// COLOR                    0   xyzw        7     NONE   float
// COLOR                    1   xyzw        8     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
//
0x00000000: vs_5_0
0x00000008: dcl_globalFlags refactoringAllowed
0x0000000C: dcl_constantbuffer CB0[9], immediateIndexed
0x0000001C: dcl_constantbuffer CB1[26], immediateIndexed
0x0000002C: dcl_constantbuffer CB2[6], immediateIndexed

layout(binding=0) uniform g_MaterialParameter
{
    vec4 g_MaterialParameter[11];
};

layout(binding=1) uniform g_CameraParameter
{
    mat3x4 m_ViewMatrix;// Offset:    0
    mat3x4 m_InverseViewMatrix;// Offset:   48 index 3
    mat4 m_ViewProjectionMatrix;// Offset:   96 index 6
    mat4 m_InverseViewProjectionMatrix;// Offset:  160 index 10
    mat4 m_InverseProjectionMatrix;// Offset:  224 index 14
    mat4 m_ProjectionMatrix;// Offset:  288 index 18
    m_MainViewToProjectionMatrix;// Offset:  352 index 22
    vec3 m_EyePosition;          // Offset:  416 index 26
    vec3 m_LookAtVector;         // Offset:  432 index 27
};

layout(binding=2) uniform g_InstanceData
{
    mat4 m_TransformMatrix;
    vec4 m_InstanceParam0;
    vec4 m_InstanceParam1;
    vec4 m_InstanceParam2;
};

in vec4 inPosition;
in vec4 inNormal;
in vec4 inBinormal;
in vec4 inTexCoord;

out vec4 o0;// gl_Position
out vec4 vNormal;// normal
out vec4 vBinormal;// binormal
out vec4 vTexCoord;// uv
out vec4 vPosWs;// posWs
out vec4 o6;// ?

void main() {

    // Position in World Space
    vPosWs.xyz = m_TransformMatrix * vec4(inPosition.xyz, 1.0);
    vPosWs.w = inPosition.w * m_InstanceParam0.x;

    gl_Position = m_MainViewToProjectionMatrix * vec4(vPosWs.xyz, 1.0);

    // NORMAL
    vNormal.xyz = m_TransformMatrix * inNormal.xyz;
    vNormal.w = m_InstanceParam0.w;

    // BINORMAL
    vec3 bn = inBinormal.xyz * 2.0 - 1.0;
    vBinormal.xyz = m_TransformMatrix * bn;
    vBinormal.w = inBinormal.w * 2.0 - 1.0;

    // TEXCOORD
    vTexCoord.xyzw = v6.xyzw;

    // ??
    vec3 m8 = g_MaterialParameter[8].xyz;
    if (dot(m8, vec3(1.0)) > 0) {// if (m8.x + m8.y + m8.z) > 0
        o6.xyz = (m_InstanceParam2.xyz - m8.xyz) * m_InstanceParam2.w + m8.xyz;
    } else {
        o6.xyz = vec3(0.0);
    }
    o6.w = m_InstanceParam1.w;
}
